@page "/myaccount"
@using AliGulmen.UnluCoProject.UrunKatalog.WebAPI.Controllers.Resources.OfferResources
@using AliGulmen.UnluCoProject.UrunKatalog.WebAPI.Controllers.Resources.PurchaseHistoryResources
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Newtonsoft.Json
@using System.Net.Http.Json
@using AliGulmen.UnluCoProject.UrunKatalog.WebAPI.Controllers.Resources.CategoryResources
@using System.Net.Http.Headers
@using System.IdentityModel.Tokens.Jwt
@inject IHttpClientFactory ClientFactory
@inject NavigationManager UriHelper


@inject ProtectedLocalStorage Storage




@if (MyOffers == null)
{
    <p><em>Loading...</em></p>
}
else
{
     <table class="table">
        <thead>
            <tr>

                <th>Ürün İsmi</th>
                <th>Teklif Tutarı</th>
                <th>Kabul Edildi Mi?</th>
                <th>Güncelle / Sil</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var offer in MyOffers)
            {
                <tr>
                    <td>@offer.ProductName</td>
                    <td>@offer.OfferedPrice</td>
                    <td>@offer.IsAccepted</td>
                    <td>   
                        <button class="btn btn-danger" @onclick="() => DeletCategory(offer.Id)"> Geri Çek </button> </td>
                        
                    
                </tr>
            }
        </tbody>
    </table>

<button class="btn btn-primary" @onclick="@(() => { showAddModal = true; })">Yeni Kategori Ekle</button>
<br><br>
<p> <button class="btn btn-primary" @onclick="SignOut">Çıkış Yap</button></p>
   



@if (showAddModal)
{
<div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Kategori Ekle</h5>
                <button type="button" class="close" data-dismiss="modal" @onclick="@(() => { showAddModal = false; })" aria-label="Vazgeç">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
         <EditForm Model="@Category" OnValidSubmit="@AddCategory">
          <div class="form-group">
             <label class="form-label" for="CategoryName">Kategori İsmi :</label>
            <InputText type="text" @bind-Value="Category.Name" id="CategoryName" class="form-control form-control-lg" />
            <ValidationMessage For="() => Category.Name" />
          </div>
          <div class="form-group">
            <label class="form-label" for="CategoryDesc">Açıklama :</label>
            <InputText type="text" @bind-Value="Category.Description" id="CategoryDesc" class="form-control form-control-lg" />
            <ValidationMessage For="() => Category.Description" />
          </div>
        </EditForm>
      </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="AddCategory">Kaydet</button>
                <button type="button" class="btn btn-secondary" @onclick="@(() => { showAddModal = false; })" data-dismiss="modal">Vazgeç</button>
            </div>
        </div>
    </div>
</div>
}











@if (showUpdateModal)
{
<div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Kategori Güncelle</h5>
                <button type="button" class="close" data-dismiss="modal" @onclick="@(() => { showUpdateModal = false; })" aria-label="Vazgeç">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
         <EditForm Model="@CategoryToUpdate" OnValidSubmit="@UpdateCategory">

          <div class="form-group">
             <label class="form-label" for="CategoryToUpdateName">Kategori İsmi :</label>
            <InputText type="text" @bind-Value="CategoryToUpdate.Name" id="CategoryToUpdateName" class="form-control form-control-lg" />
            <ValidationMessage For="() => CategoryToUpdate.Name" />
          </div>
          <div class="form-group">
            <label class="form-label" for="CategoryToUpdateDesc">Açıklama :</label>
            <InputText type="text" @bind-Value="CategoryToUpdate.Description"  id="CategoryToUpdateDesc" class="form-control form-control-lg" />
            <ValidationMessage For="() => CategoryToUpdate.Description" />
          </div>
        </EditForm>
      </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="UpdateCategory">Kaydet</button>
                <button type="button" class="btn btn-secondary" @onclick="@(() => { showUpdateModal = false; })" data-dismiss="modal">Vazgeç</button>
            </div>
        </div>
    </div>
</div>
}







}





@code {

    public List<CategoryResource> MyCategories { get; set; }
    public SaveCategoryResource Category = new();
    bool showAddModal = false;
    bool showUpdateModal = false;
    public CategoryResource CategoryToUpdate = new();


    public List<OfferResource> MyOffers { get; set; }
    public List<PurchaseHistoryResource> MyPurchased { get; set; }
    public List<PurchaseHistoryResource> MySold { get; set; }
    private string _userId;


    public async Task SignOut()
    {
        await Storage.DeleteAsync("token");
        UriHelper.NavigateTo("login");
    }




    public async Task UpdateCategory()
    {
        showUpdateModal = false;

        var client = ClientFactory.CreateClient();


        var token =  await Storage.GetAsync<string>("token");

        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);

        Category.Name = CategoryToUpdate.Name;
        Category.Description = CategoryToUpdate.Description;

        var response = await client.PutAsJsonAsync("http://localhost:3000/api/categories/"+CategoryToUpdate.Id,Category);


        if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
        {

            UriHelper.NavigateTo("categories");
            await OnInitializedAsync();
        }


    }





    public async Task AddCategory()
    {
        showAddModal = false;

        var client = ClientFactory.CreateClient();


        var token =  await Storage.GetAsync<string>("token");

        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);

        var response = await client.PostAsJsonAsync("http://localhost:3000/api/categories",Category);


        if (response.StatusCode == System.Net.HttpStatusCode.Created)
        {

            UriHelper.NavigateTo("categories");
            await OnInitializedAsync();
        }
    }



    public async Task DeletCategory(int id)
    {

        var client = ClientFactory.CreateClient();
       
        var token =  await Storage.GetAsync<string>("token");

        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);

        var response = await client.DeleteAsync("http://localhost:3000/api/categories/"+id);


        if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
        {

            UriHelper.NavigateTo("categories");
            await OnInitializedAsync();
        }
    }


    
    protected override async Task OnInitializedAsync()
    {
     var client = ClientFactory.CreateClient();


        var token = await Storage.GetAsync<string>("token");
        var handler = new JwtSecurityTokenHandler();
        _userId = handler.ReadJwtToken(token.Value).Claims.First().Value;

        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);

        var response = await client.PostAsJsonAsync("http://localhost:3000/api/myoffers",_userId);

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();

            MyOffers = JsonConvert.DeserializeObject<List<OfferResource>>(json);


        }
        else
        {
            UriHelper.NavigateTo("login");
        }

    }
}

