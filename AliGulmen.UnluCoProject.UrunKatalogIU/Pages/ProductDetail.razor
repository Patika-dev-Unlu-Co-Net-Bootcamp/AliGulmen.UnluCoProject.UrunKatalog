@page "/ProductDetail"
@using AliGulmen.UnluCoProject.UrunKatalog.Shared
@using AliGulmen.UnluCoProject.UrunKatalog.WebAPI.Controllers.Resources.OfferResources
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Newtonsoft.Json
@using System.Net.Http.Json
@using AliGulmen.UnluCoProject.UrunKatalog.WebAPI.Controllers.Resources.ProductResources
@using System.Net.Http.Headers
@using System.IO
@using System.IdentityModel.Tokens.Jwt
@inject IHttpClientFactory ClientFactory
@inject NavigationManager UriHelper
@inject Models.AppData AppData


@inject ProtectedLocalStorage Storage



@if (product == null)
{
    <p><em>Loading...</em></p>
}
else
{
   


    <ul class="list-unstyled">
  <!-- Products -->
  <li class="card py-3 mb-5">
    <div class="row">
      <div class="col-4 pr-0">
         <img src=@Path.Combine("/Images", product.PictureUrl) class="rounded" style="width:80%;height:auto;" /> 
      </div>

      <div class="col-8">
        <div class="card-body py-5 px-md-4">
          <div class="mb-2">
            <a class="d-inline-block text-secondary small font-weight-medium mb-1" href="#">@product.CategoryName</a> 
            @if(product.IsOfferable){
            <span class="badge badge-success badge-pill ml-1">Teklife Açık!</span>
            }
             @if(product.IsSold){
            <span class="badge badge-danger badge-pill ml-1">Satıldı!</span>
             }
            <h2 class="h5 font-weight-normal">
              <a class="text-secondary" href="#">@product.Name</a>             

             <br/> <span class="h6">@product.Description</span>
             <br/> <span class="h6" style="font-weight: bold;">Marka : </span> <span class="h6">@product.BrandName </span>
             <br/> <span class="h6" style="font-weight: bold;">Renk : </span> <span class="h6">@product.ColorName </span>
             <br/> <span class="h6" style="font-weight: bold;">Kullanım Durumu : </span> <span class="h6">@product.ConditionStatus </span>
             <br/> <span class="h6" style="font-weight: bold;">Satıcı : </span> <span class="h6">@product.Owner </span>
            </h2>
            <div class="d-block">
              
              <span class="h5" style="font-weight:bold;">₺@product.BuyItNowPrice</span>
            </div>
          </div>
           @if(CurrentOffer is null && product.IsOfferable){
          <button type="button" class="btn btn-sm btn-outline-primary btn-sm-wide btn-pill transition-3d-hover mr-1" @onclick="(() => { 
                            showUpdateModal = true;
                            ProductIdToCreate = product.Id;
                            NewOffer =  product.BuyItNowPrice.ToString();

                        })">Teklif Ver</button>
           }
             @if(CurrentOffer is not null){
                  <button type="button" class="btn btn-sm btn-outline-primary btn-sm-wide btn-pill transition-3d-hover mr-1" 
                  @onclick="(async () => { await DeleteOffer(CurrentOffer.Id); })">Teklifi Geri Çek</button>
                        }

              @if(product.UserId != _userId && !product.IsSold)
                        {
                             <button type="button" class="btn btn-sm btn-outline-primary btn-sm-wide btn-pill transition-3d-hover mr-1" 
                  @onclick="(async () => { await BuyProduct(product.Id); })">Satın Al</button>
                        }
         
        </div>
      </div>
    </div>
  </li>
  <!-- End Products -->
</ul>

                     <div class="form-outline mb-4">
                     
                      
                        
                      
                     </div>



 @if (showUpdateModal)
{
<div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Teklifi Güncelle</h5>
                <button type="button" class="close" data-dismiss="modal" @onclick="@(() => { showUpdateModal = false; })" aria-label="Vazgeç">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
         <EditForm Model="@OffertoCreate" OnValidSubmit="@CreateOffer">

          <div class="form-group">
             <label class="form-label" for="OffertoUpdateValue">Yeni Teklif :</label>
             <input type="range" min="0" max="100" step="5" value="@ActualNumber"  @onchange="CheckSliderRating"  @oninput="@((args) => Calc(args.Value.ToString()))"/>
            <InputText type="text" @bind-Value="NewOffer" id="OffertoUpdateValue" class="form-control form-control-lg" />
          </div>
         
        </EditForm>
      </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="CreateOffer">Kaydet</button>
                <button type="button" class="btn btn-secondary" @onclick="@(() => { showUpdateModal = false; })" data-dismiss="modal">Vazgeç</button>
            </div>
        </div>
    </div>
</div>
}




         

}





@code {
    private int ActualNumber { get; set; } = 70;
    private string NewOffer;
    public SaveOfferResource OffertoCreate = new();
    public OfferResource CurrentOffer = new();
    private string _userId;
    private int ProductIdToCreate;
    bool showUpdateModal = false;


    public ProductResource product { get; set; }
    public SaveProductResource productToBuy { get; set; }
    public int ProductId;

    public void CheckSliderRating()
    {
        NewOffer = (ActualNumber * product.BuyItNowPrice / 100).ToString();
    }


    public void Calc(string step)
    {
        ActualNumber = Convert.ToInt32(step);
    }







    protected override async Task OnInitializedAsync()
    {
        CurrentOffer = null;
        ProductId = (AppData.ProductId ==0) ? 1: AppData.ProductId;
        var client = ClientFactory.CreateClient();

        var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:3000/api/products/"+ProductId);



        var token =  await Storage.GetAsync<string>("token");
        var handler = new JwtSecurityTokenHandler();
        if(token.Success)
            _userId = handler.ReadJwtToken(token.Value).Claims.First().Value;

        request.Headers.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);


        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();

            product = JsonConvert.DeserializeObject<ProductResource>(json);
            ProductId = product.Id;

        }
        else
        {
            UriHelper.NavigateTo("login");
        }




        request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:3000/api/Offers?ProductId="+ProductId.ToString() + "&&UserId=" + _userId); 

        request.Headers.Authorization =
           new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);

        response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();

            var paginatedResult = JsonConvert.DeserializeObject<PaginatedResult<OfferResource>>(json);
            CurrentOffer = paginatedResult.Data.FirstOrDefault();
        }
        else
        {

        }

    }




    public async Task DeleteOffer(int id)
    {

        var client = ClientFactory.CreateClient();

        var token =  await Storage.GetAsync<string>("token");


        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);

        var response = await client.DeleteAsync("http://localhost:3000/api/offers/"+id);


        if (response.StatusCode == System.Net.HttpStatusCode.NoContent || response.StatusCode == System.Net.HttpStatusCode.NotFound)
        {

            await OnInitializedAsync();
        }
    }






    public async Task BuyProduct(int id)
    {

        var client = ClientFactory.CreateClient();

        var token =  await Storage.GetAsync<string>("token");
        var handler = new JwtSecurityTokenHandler();
        _userId = handler.ReadJwtToken(token.Value).Claims.First().Value;


        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);

        var response = await client.PutAsJsonAsync("http://localhost:3000/api/products/sell/"+id, _userId);


        if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
        {

            await OnInitializedAsync();
        }
    }









    public async Task CreateOffer()
    {
        showUpdateModal = false;

        var client = ClientFactory.CreateClient();


        var token =  await Storage.GetAsync<string>("token");
        var handler = new JwtSecurityTokenHandler();
        _userId = handler.ReadJwtToken(token.Value).Claims.First().Value;

        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
        OffertoCreate.OfferedPrice =Convert.ToInt32(NewOffer);
        OffertoCreate.OfferStatus = UrunKatalog.Core.Domain.Enums.OfferStatus.BEKLEMEDE;
        OffertoCreate.ProductId = ProductIdToCreate;
        OffertoCreate.UserId = _userId;


        var response = await client.PostAsJsonAsync("http://localhost:3000/api/offers/", OffertoCreate);


        if (response.StatusCode == System.Net.HttpStatusCode.Created)
        {

            await OnInitializedAsync();
        }


    }


}

