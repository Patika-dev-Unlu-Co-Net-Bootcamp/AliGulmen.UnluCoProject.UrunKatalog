@page "/products"
@using AliGulmen.UnluCoProject.UrunKatalog.Shared
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Newtonsoft.Json
@using System.Net.Http.Json
@using AliGulmen.UnluCoProject.UrunKatalog.WebAPI.Controllers.Resources.ProductResources
@using AliGulmen.UnluCoProject.UrunKatalog.WebAPI.Controllers.Resources.CategoryResources
@using System.Net.Http.Headers
@using System.IO
@inject IHttpClientFactory ClientFactory
@inject NavigationManager UriHelper
@inject Models.AppData AppData


@inject ProtectedLocalStorage Storage



@if (MyProducts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
  <div class="col-sm-12 col-lg-12 mb-4 mb-lg-0">
        
          <select @onchange="FilterResults" class="custom-select">
                           
                                <option value="">Tüm Kategoriler</option>
                                 @foreach (var item in Categories)
                                {
                                <option value="@item.Id">@item.Name</option>
                                }
                                
                        </select>


                    </div>


</div>







    <!-- Products Section -->
<div class="container">
    <div class="row">
           @foreach (var product in MyProducts)
            {
        <div class="col-6 col-lg-3 mb-6 mb-lg-0 rounded" style=" margin-bottom: 20px; margin-top:20px;">

            <!-- Card -->
            <div class="card d-block rounded" >
                
                @if(product.IsSold){
                <div class="position-absolute top-0 left-0 pt-3 pl-3">
                    <span class="badge badge-danger badge-pill">Satıldı</span>
                </div>
                }

                   @if(product.IsOfferable){
                 <div class="position-absolute top-0 left-0 pt-3 pl-3">
                    <span class="badge badge-success badge-pill">Teklife Açık</span>
                </div>
                   }
                <img class="card-img-top" src=@Path.Combine("/Images", product.PictureUrl)>
               
              
                <div class="card-footer text-center py-4">
                    <h3 class="h5 mb-1">@product.Name</h3>
                    <span class="d-block text-muted font-size-1 mb-3">₺@product.BuyItNowPrice</span>
                    <a class="btn btn-sm btn-outline-primary btn-pill transition-3d-hover px-3" @onclick=@(()=> GoToDetailPage(product.Id))>Detaylar</a> 
                </div>
            </div>
            <!-- End Card -->

            


        </div> }
    </div>
    <div class=container>
        <div class="row">
                @if (hasPrevPage)
                {
                <div class="col-sm-2 d-flex justify-content-start">  <span><a href="">Previous Page</a></span> </div>
                }
                
  <div class="col-sm-8"></div>
                @if (hasNextPage)
                {
                    <div class="col-sm-2 d-flex justify-content-end"><span><a href="">Next Page</a></span></div>
                }
                
</div>
  
    
    
    </div>
</div>






}





@code {

    public List<ProductResource> MyProducts { get; set; }
    public List<CategoryResource> Categories = new();
    public CategoryResource Category = new();
    public string selectedCategory;
    public bool hasNextPage;
    public bool hasPrevPage;
    public int currentPage;

   

    public void GoToDetailPage(int id)
    {
        AppData.ProductId = id;
        UriHelper.NavigateTo("ProductDetail");
    }
    public async Task FilterResults(ChangeEventArgs e)
    {
        HttpRequestMessage request;
        var selectedCategory = e.Value.ToString();
        var client = ClientFactory.CreateClient();

        if (selectedCategory == "")
        {
            request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:3000/api/products?PageSize=10&&PageNumber=1");
        }
        else
        {
            request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:3000/api/Products?CategoryId="+selectedCategory+"&&PageSize=10&&PageNumber=1");  
        }



        var token =  await Storage.GetAsync<string>("token");


        request.Headers.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);
        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();

            var paginatedResult = JsonConvert.DeserializeObject<PaginatedResult<ProductResource>>(json);
            MyProducts = paginatedResult.Data;
            hasNextPage = paginatedResult.HasNextPage;
            hasPrevPage = paginatedResult.HasPreviousPage;
            currentPage = paginatedResult.CurrentPage;
        }

    }


    protected override async Task OnInitializedAsync()
    {

        var client = ClientFactory.CreateClient();

        var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:3000/api/products?PageSize=3&&PageNumber=1");
        var request2 = new HttpRequestMessage(HttpMethod.Get, "http://localhost:3000/api/categories");



        var token =  await Storage.GetAsync<string>("token");


        request.Headers.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);

        request2.Headers.Authorization =
      new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);


        var response = await client.SendAsync(request);
        var response2 = await client.SendAsync(request2);

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();

            var paginatedResult = JsonConvert.DeserializeObject<PaginatedResult<ProductResource>>(json);
            MyProducts = paginatedResult.Data;
            hasNextPage = paginatedResult.HasNextPage;
            hasPrevPage = paginatedResult.HasPreviousPage;
            currentPage = paginatedResult.CurrentPage;

        }
        else
        {
            UriHelper.NavigateTo("login");
        }

         if (response2.IsSuccessStatusCode)
        {
            var json = await response2.Content.ReadAsStringAsync();

            var paginatedResult = JsonConvert.DeserializeObject<PaginatedResult<CategoryResource>>(json);

            Categories = paginatedResult.Data;
        }
        else
        {
            UriHelper.NavigateTo("login");
        }
    }
}

