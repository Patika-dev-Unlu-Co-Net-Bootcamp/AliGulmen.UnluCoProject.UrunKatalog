@page "/categories"
@using AliGulmen.UnluCoProject.UrunKatalog.Shared
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Newtonsoft.Json
@using System.Net.Http.Json
@using AliGulmen.UnluCoProject.UrunKatalog.WebAPI.Controllers.Resources.CategoryResources
@using System.Net.Http.Headers
@inject IHttpClientFactory ClientFactory
@inject NavigationManager UriHelper


@inject ProtectedLocalStorage Storage




@if (MyCategories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Kategori İsmi</th>
                <th>Açıklama</th>
                <th>Güncelle / Sil</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in MyCategories)
            {
                <tr>
                    <td>@category.Id</td>
                    <td>@category.Name</td>
                    <td>@category.Description</td>
                    <td>
                        <button class="btn btn-primary" @onclick="@(() => { showUpdateModal = true;
                    CategoryToUpdate.Id=category.Id;
                    CategoryToUpdate.Name=category.Name;
                    CategoryToUpdate.Description=category.Description;})">
                            Güncelle
                        </button>
                        <button class="btn btn-danger" @onclick="() => DeletCategory(category.Id)"> Sil </button>
                    </td>


                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="@(() => { showAddModal = true; })">Yeni Kategori Ekle</button>
    <br>
    <br>
    <p> <button class="btn btn-primary" @onclick="SignOut">Çıkış Yap</button></p>




    @if (showAddModal)
    {
        <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Kategori Ekle</h5>
                        <button type="button" class="close" data-dismiss="modal" @onclick="@(() => { showAddModal = false; })" aria-label="Vazgeç">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@Category" OnValidSubmit="@AddCategory">
                            <div class="form-group">
                                <label class="form-label" for="CategoryName">Kategori İsmi :</label>
                                <InputText type="text" @bind-Value="Category.Name" id="CategoryName" class="form-control form-control-lg" />
                                <ValidationMessage For="() => Category.Name" />
                            </div>
                            <div class="form-group">
                                <label class="form-label" for="CategoryDesc">Açıklama :</label>
                                <InputText type="text" @bind-Value="Category.Description" id="CategoryDesc" class="form-control form-control-lg" />
                                <ValidationMessage For="() => Category.Description" />
                            </div>
                        </EditForm>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" @onclick="AddCategory">Kaydet</button>
                        <button type="button" class="btn btn-secondary" @onclick="@(() => { showAddModal = false; })" data-dismiss="modal">Vazgeç</button>
                    </div>
                </div>
            </div>
        </div>
    }











    @if (showUpdateModal)
    {
        <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Kategori Güncelle</h5>
                        <button type="button" class="close" data-dismiss="modal" @onclick="@(() => { showUpdateModal = false; })" aria-label="Vazgeç">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@CategoryToUpdate" OnValidSubmit="@UpdateCategory">

                            <div class="form-group">
                                <label class="form-label" for="CategoryToUpdateName">Kategori İsmi :</label>
                                <InputText type="text" @bind-Value="CategoryToUpdate.Name" id="CategoryToUpdateName" class="form-control form-control-lg" />
                                <ValidationMessage For="() => CategoryToUpdate.Name" />
                            </div>
                            <div class="form-group">
                                <label class="form-label" for="CategoryToUpdateDesc">Açıklama :</label>
                                <InputText type="text" @bind-Value="CategoryToUpdate.Description" id="CategoryToUpdateDesc" class="form-control form-control-lg" />
                                <ValidationMessage For="() => CategoryToUpdate.Description" />
                            </div>
                        </EditForm>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" @onclick="UpdateCategory">Kaydet</button>
                        <button type="button" class="btn btn-secondary" @onclick="@(() => { showUpdateModal = false; })" data-dismiss="modal">Vazgeç</button>
                    </div>
                </div>
            </div>
        </div>
    }







}





@code {

    public List<CategoryResource> MyCategories { get; set; }
    public SaveCategoryResource Category = new();
    bool showAddModal = false;
    bool showUpdateModal = false;
    public CategoryResource CategoryToUpdate = new();


    public async Task SignOut()
    {
        await Storage.DeleteAsync("token");
        UriHelper.NavigateTo("login");
    }




    public async Task UpdateCategory()
    {
        showUpdateModal = false;

        var client = ClientFactory.CreateClient();


        var token = await Storage.GetAsync<string>("token");

        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);

        Category.Name = CategoryToUpdate.Name;
        Category.Description = CategoryToUpdate.Description;

        var response = await client.PutAsJsonAsync("http://localhost:3000/api/categories/" + CategoryToUpdate.Id, Category);


        if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
        {

            UriHelper.NavigateTo("categories");
            await OnInitializedAsync();
        }


    }





    public async Task AddCategory()
    {
        showAddModal = false;

        var client = ClientFactory.CreateClient();


        var token = await Storage.GetAsync<string>("token");

        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);

        var response = await client.PostAsJsonAsync("http://localhost:3000/api/categories", Category);


        if (response.StatusCode == System.Net.HttpStatusCode.Created)
        {

            UriHelper.NavigateTo("categories");
            await OnInitializedAsync();
        }
    }



    public async Task DeletCategory(int id)
    {

        var client = ClientFactory.CreateClient();

        var token = await Storage.GetAsync<string>("token");

        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);

        var response = await client.DeleteAsync("http://localhost:3000/api/categories/" + id);


        if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
        {

            UriHelper.NavigateTo("categories");
            await OnInitializedAsync();
        }
    }



    protected override async Task OnInitializedAsync()
    {

        var client = ClientFactory.CreateClient();

        var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:3000/api/categories");


        var token = await Storage.GetAsync<string>("token");


        request.Headers.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);


        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();

            var paginatedResult = JsonConvert.DeserializeObject<PaginatedResult<CategoryResource>>(json);

            MyCategories = paginatedResult.Data;


        }
        else
        {
            UriHelper.NavigateTo("login");
        }
    }
}

