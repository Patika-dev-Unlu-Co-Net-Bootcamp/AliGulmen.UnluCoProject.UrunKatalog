@page "/addProduct"
@inject IHttpClientFactory ClientFactory
@using AliGulmen.UnluCoProject.UrunKatalog.Shared
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Hosting
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.IO
@using AliGulmen.UnluCoProject.UrunKatalog.WebAPI.Controllers.Resources.ProductResources
@using AliGulmen.UnluCoProject.UrunKatalog.WebAPI.Controllers.Resources.ConditionResources
@using AliGulmen.UnluCoProject.UrunKatalog.WebAPI.Controllers.Resources.ColorResources
@using AliGulmen.UnluCoProject.UrunKatalog.WebAPI.Controllers.Resources.CategoryResources
@using AliGulmen.UnluCoProject.UrunKatalog.WebAPI.Controllers.Resources.BrandResources
@using System.Net.Http.Headers
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt
@inject ProtectedLocalStorage Storage
@inject NavigationManager UriHelper
@inject IWebHostEnvironment Environment



@if (Categories is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@Product" OnValidSubmit="@AddNewProduct">
        <DataAnnotationsValidator />
        
        <section class="vh-90">
            <div class="container py-5 h-100">
                <div class="row d-flex align-items-center justify-content-center h-100">
                   
                    <div class="col-md-7 col-lg-5 col-xl-5 offset-xl-1">
                        <label class="form-label" for="customFile">Resim Seçiniz : </label>
      <InputFile OnChange="@LoadFiles" id="fileAttachmentBtn" accept=".jpg,.png,.jpeg" name="file-attachment" class="file-attachment-btn__label"/>


                        <div class="form-outline mb-4">
                            <InputText type="text" disabled=false @bind-Value="Product.PictureUrl" id="ProductPicture" class="form-control form-control-md" />
                            <ValidationMessage For="() => Product.PictureUrl" />
                        </div>


                        <div class="form-outline mb-4">
                            <label class="form-label" for="ProductName">Ürün İsmi</label>
                            <InputText type="text" @bind-Value="Product.Name" id="ProductName" class="form-control form-control-md" />
                            <ValidationMessage For="() => Product.Name" />
                        </div>


                        <div class="form-outline mb-4">
                            <label class="form-label" for="ProductDesc">Açıklama</label>
                            <InputText type="text" @bind-Value="Product.Description" id="ProductDesc" class="form-control form-control-md" />
                            <ValidationMessage For="() => Product.Description" />
                        </div>




                        <div class="form-outline mb-4">
                            <label class="form-label" for="ProductPrice">Hemen Sat Fiyatı</label>
                            <InputText type="text" @bind-Value="_price" id="ProductPrice" class="form-control form-control-md" />
                            <ValidationMessage For="() => Product.Name" />
                        </div>

                        <div class="form-outline mb-4">
                             <div class="custom-control custom-switch">
                            <InputCheckbox type="checkbox" class="custom-control-input"  id="ProductIsOfferable" @bind-Value="Product.IsOfferable"/>
                            <label class="custom-control-label" for="ProductIsOfferable">
                            <span class="d-block">Teklife Açık Mı?</span>
                            <small class="d-block text-muted">Bu seçeneği aktif etmeniz durumunda ürününüz için teklifler alabilirsiniz!</small>
                             </label>
                            </div>


                        </div>


                        <div class="form-outline mb-4">
                            <label class="form-label" for="Condition">Condition</label>
                            <InputSelect class="custom-select" @bind-Value="Product.ConditionId">
                                <option selected="selected">Lütfen Seçiniz</option>
                                @foreach (var item in Conditions)
                                {
                                <option value="@item.Id">@item.Status</option>
                                }
                        </InputSelect>
                           @if(_error != ""){
                       <span class="badge badge-danger badge-pill">@_error</span>     
                            }
                        <ValidationMessage For="() => Product.ConditionId" />
                    </div>

                    <div class="form-outline mb-4">
                        <label class="form-label" for="Color">Color</label>
                        <InputSelect class="custom-select" @bind-Value="Product.ColorId">
                            <option selected="selected">Lütfen Seçiniz</option>
                            @foreach (var item in Colors)
                                {
                                <option value="@item.Id">@item.Name</option>
                                }
                        </InputSelect>
                    </div>



                    <div class="form-outline mb-4">
                        <label class="form-label" for="Brand">Brand</label>
                        <InputSelect class="custom-select" @bind-Value="Product.BrandId">
                            <option selected="selected">Lütfen Seçiniz</option>
                            @foreach (var item in Brands)
                                {
                                <option value="@item.Id">@item.Name</option>
                                }
                        </InputSelect>
                    </div>

                    <div class="form-outline mb-4">
                        <label class="form-label" for="Category">Category</label>
                        <InputSelect class="custom-select" @bind-Value="Product.CategoryId">
                            <option selected="selected">Lütfen Seçiniz</option>

                            @foreach (var item in Categories)
                                {
                                <option value="@item.Id">@item.Name</option>
                                }
                        </InputSelect>
                        <ValidationMessage For="() => Product.CategoryId" />
                    </div>

                     @if(_error != ""){
                       <span class="badge badge-danger badge-pill">@_error</span>     
                            }

                    <!-- Submit button -->
                    <button type="submit" class="btn btn-primary btn-lg btn-block">Ekle</button>

                            <ValidationSummary />
                           


                </div>
            </div>
        </div>
    </section>

</EditForm>



}






@code {
    public SaveProductResource Product = new();
    public List<ConditionResource> Conditions = new();
    public List<ColorResource> Colors = new();
    public List<BrandResource> Brands = new();
    public List<CategoryResource> Categories = new();
    private int maxAllowedFiles = 1;
    private string _price;

    public string pictureUrl;
    private string _userId;
    private string _error;











    protected override async Task OnInitializedAsync()
    {
        _error = "";
        var client = ClientFactory.CreateClient();
        var token = await Storage.GetAsync<string>("token");

        if (!token.Success)
        {
            UriHelper.NavigateTo("login");
        }


        var request1 = new HttpRequestMessage(HttpMethod.Get, "http://localhost:3000/api/conditions");
        var request2 = new HttpRequestMessage(HttpMethod.Get, "http://localhost:3000/api/colors");
        var request3 = new HttpRequestMessage(HttpMethod.Get, "http://localhost:3000/api/brands");
        var request4 = new HttpRequestMessage(HttpMethod.Get, "http://localhost:3000/api/categories");




        request1.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);
        request2.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);
        request3.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);
        request4.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);


        var response1 = await client.SendAsync(request1);
        var response2 = await client.SendAsync(request2);
        var response3 = await client.SendAsync(request3);
        var response4 = await client.SendAsync(request4);

        if (response1.IsSuccessStatusCode)
        {
            var json = await response1.Content.ReadAsStringAsync();
            var paginatedResult = JsonConvert.DeserializeObject<PaginatedResult<ConditionResource>>(json);
            Conditions = paginatedResult.Data;
        }
        else
        {
            UriHelper.NavigateTo("login");
        }

        if (response2.IsSuccessStatusCode)
        {
            var json = await response2.Content.ReadAsStringAsync();
            var paginatedResult = JsonConvert.DeserializeObject<PaginatedResult<ColorResource>>(json);
            Colors = paginatedResult.Data;
        }
        else
        {
            UriHelper.NavigateTo("login");
        }


        if (response3.IsSuccessStatusCode)
        {
            var json = await response3.Content.ReadAsStringAsync();
            var paginatedResult = JsonConvert.DeserializeObject<PaginatedResult<BrandResource>>(json);
            Brands = paginatedResult.Data;
        }
        else
        {
            UriHelper.NavigateTo("login");
        }


        if (response4.IsSuccessStatusCode)
        {
            var json = await response4.Content.ReadAsStringAsync();
            var paginatedResult = JsonConvert.DeserializeObject<PaginatedResult<CategoryResource>>(json);
            Categories = paginatedResult.Data;
        }
        else
        {
            UriHelper.NavigateTo("login");
        }


    }




    private async Task AddNewProduct()
    {
        if(Product.CategoryId == 0 || Product.ConditionId== 0)
        {
            _error = "Lütfen Kategori ve Kullanım Durumları Alanlarını Doldurunuz!";
        }
        else
        {
            _error = "";
            var client = ClientFactory.CreateClient();


        var token = await Storage.GetAsync<string>("token");
        var handler = new JwtSecurityTokenHandler();
        _userId = handler.ReadJwtToken(token.Value).Claims.First().Value;
        Product.UserId = _userId;
        Product.BuyItNowPrice = Int32.Parse(_price);

        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
        var response = await client.PostAsJsonAsync("http://localhost:3000/api/products", Product);


        if (response.StatusCode == System.Net.HttpStatusCode.Created)
        {
            UriHelper.NavigateTo("home");
        }
        }
       

    }








    private async Task LoadFiles(InputFileChangeEventArgs e)
    {

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {

                var path = Path.Combine("wwwroot/Images", file.Name);
                pictureUrl =  file.Name;

                await using FileStream fs = new(pictureUrl, FileMode.Create);
                await file.OpenReadStream().CopyToAsync(fs);
                Product.PictureUrl = pictureUrl;
            }
            catch (Exception)
            {

            }
        }


       
    }


}
